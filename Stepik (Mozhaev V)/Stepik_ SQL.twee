:: StoryTitle
Stepik: SQL


:: StoryData
{
  "ifid": "BFF9DE3E-6942-42A7-94C0-ACBCDBA2CC56",
  "format": "Harlowe",
  "format-version": "3.3.8",
  "start": "Ошибки",
  "zoom": 1
}


:: 1.1 SQL {"position":"900,375","size":"100,100"}
(align:"=><=")+(box:"X=")[''Погружение в SQL: Основы и первые шаги'']

(text-style:"double-underline")[Обзор SQL и его применения]

//SQL// (Structured Query Language) — это стандартизированный язык запросов, используемый для управления и манипуляции данными в реляционных базах данных.
  
- (text-style:"underline")[Применение SQL:]
  - ''Бизнес-аналитика'': Многие компании используют SQL для анализа своих данных, чтобы принимать информированные бизнес-решения.
  - ''Веб-разработка'': SQL помогает в управлении данными в веб-приложениях, отвечая за хранение информации о пользователях, заказах и других аспектах.
  - ''Наука о данных'': SQL применяется для извлечения, анализа и обработки данных, что позволяет ученым получать ценную информацию из больших объемов данных.
  
- (text-style:"underline")[Особенности SQL:]
  - ''Специализация на данных'': SQL разработан специально для работы с данными и управления базами данных, не предназначен для программирования.
  - ''Декларативный подход'': Уникальная черта SQL, пользователь описывает желаемый результат, а не шаги для его достижения, в отличие от императивных языков программирования.

- (text-style:"underline")[Преимущества SQL:]
  - ''Универсальность'': SQL используется во многих системах управления базами данных, делая его широко применимым.
  - ''Мощь в анализе данных'': SQL обладает эффективными средствами обработки больших объемов данных и извлечения полезной информации.
  - ''Легкость изучения'': Основы SQL относительно просты для понимания, что делает его доступным даже для новичков в области работы с данными.
  
[[Далее]]

[[1.2 SQL]]


:: 1.2 SQL {"position":"900,1400","size":"100,100"}

(align:"=><=")+(box:"X=")[''SQL Select'']


//SELECT в SQL// — это команда, используемая для выборки данных из одной или нескольких таблиц базы данных. 
 
''Применение на практике:''

''Отчеты по продажам:'' Выборка данных о продажах из таблицы продаж для анализа общего объема продаж или продаж по конкретным товарам.
''Управление клиентской базой: ''Получение списка клиентов с определенными характеристиками.
''Аналитика веб-сайтов:'' Выборка данных о посещениях веб-страниц для анализа поведения пользователей.
 
Основной синтаксис команды ''SELECT'' выглядит следующим образом:

(text-colour:blue)[SELECT] column1, column2, ...
(text-colour:blue)[FROM] table_name;
Здесь //column1, column2 //— это столбцы, которые вы хотите выбрать, а //table_name// — имя таблицы, из которой производится выборка.

 
Пример запроса:

(text-colour:blue)[SELECT] Name, Age
(text-colour:blue)[FROM] Employees;
Этот запрос выберет данные из столбцов //Name// (имя) и //Age// (возраст) всех записей в таблице //Employees// (сотрудники). 

[[Далее->Скрин]]

[[Назад->Сетевые БД]]

[[1.1 SQL]] 


:: 1.3 SQL {"position":"900,3275","size":"100,100"}
(align:"=><=")+(box:"X=")[''SQL Comments'']

''Комментарии ''в SQL - это фрагменты текста в коде SQL-запросов, которые не выполняются как часть запроса. Они используются для пояснения кода, уточнения запросов или временного исключения определенных частей кода из выполнения.

''Важность комментариев:''

''Комментарии в SQL имеют решающее значение для:''

''Повышения читаемости: ''Объяснение сложной логики или указание на цели определенных запросов.
''Облегчения совместной работы:'' Помогают другим разработчикам понять ваш код, что критически важно в командной работе.
''Упрощения отладки и тестирования:'' Позволяют временно отключить части кода без удаления их.
 

''Синтаксис комментариев:''

В SQL существуют //два// основных типа комментариев:

//1. Однострочные комментарии://

Начинаются с ''--'' и продолжаются до конца строки.
Пример:

(text-colour:red)[-- Это однострочный комментарий]
(text-colour:blue)[SELECT] * (text-colour:blue)[FROM users]; -- (text-colour:red)[Комментарий после кода]

//2. Многострочные (блочные) комментарии://

Начинаются с   /* и заканчиваются на ''*/.''
Могут занимать несколько строк.
Пример:

(text-colour:red)[/* Это многострочный комментарий,
   который продолжается на несколько строк */]
(text-colour:blue)[SELECT] * (text-colour:blue)[FROM users];
 
''Применение на практике:''

''Описание логики запроса:''
(text-colour:red)[-- Получение списка пользователей старше 30 лет]
(text-colour:blue)[SELECT name], age (text-colour:blue)[FROM users WHERE] age > (text-colour:navy)[30];
''Временное отключение кода:''
(text-colour:blue)[SELECT name], age (text-colour:blue)[FROM users];
(text-colour:red)[-- SELECT email FROM users; -- Этот запрос временно отключен]
''Объяснение сложных запросов:''
(text-colour:red)[ /*
Запрос для получения общего количества покупок
каждого пользователя за последний месяц
*/ ]
(text-colour:blue)[SELECT] user_id, (text-colour:blue)[COUNT](*) (text-colour:blue)[FROM] purchases
(text-colour:blue)[WHERE] purchase_date > (text-colour:green)['2021-01-01']
(text-colour:blue)[GROUP BY] user_id;

[[Синтаксис]]

[[Назад->Скрин10]]



:: 1.4 SQL {"position":"900,3525","size":"100,100"}
(align:"=><=")+(box:"X=")[''Введение в SQL-диалекты'']

//SQL-диалекты// — это вариации стандартного языка SQL, адаптированные под конкретные системы управления базами данных (СУБД). Каждая СУБД имеет свой собственный "диалект" или версию SQL, который расширяет или модифицирует стандартный SQL для удовлетворения специфических требований и возможностей системы.

''Стандарт SQL и его расширения''

''SQL'' был стандартизирован организацией //ANSI //(American National Standards Institute), чтобы обеспечить определенный уровень единообразия и совместимости между разными системами. Тем не менее, многие СУБД вводят свои расширения к стандарту для обеспечения дополнительной функциональности, что и создает различные SQL-диалекты.

Популярные SQL-диалекты

''Transact-SQL (T-SQL)''
- Используется в Microsoft SQL Server и Sybase.
- Включает расширенные возможности для управления транзакциями, исключительными ситуациями и аналитическими функциями.

''PL/SQL (Procedural Language/SQL)''
- Расширение SQL от Oracle.
- Включает процедурные возможности, такие как переменные, циклы и условия.

''PL/pgSQL для PostgreSQL''
- Аналог PL/SQL для PostgreSQL, добавляющий процедурные элементы и управление исключениями.
 
Важность понимания разных диалектов
''1. Выбор подходящего диалекта для проекта:''

В зависимости от требований проекта и выбранной СУБД, разработчики должны выбирать соответствующий SQL-диалект для эффективной работы.

''2. Переносимость и совместимость:''

Хотя основы SQL остаются постоянными, специфические функции диалектов могут значительно отличаться, что важно учитывать при переносе данных и приложений между разными СУБД.

''3. Оптимизация производительности:''

Понимание особенностей диалекта может помочь оптимизировать производительность запросов и эффективность работы с базой данных.

[[T-SQL]]

[[Назад->Синтаксис]]


:: 11 {"position":"275,7100","size":"100,100"}
''Какие из следующих утверждений верны для оператора AND в SQL?''

- Может использоваться с любым количеством условий

- Возвращает строки, если все условия ложны

- Возвращает строки, если хотя бы одно условие истинно

- Возвращает строки, если все условия истинны

[[1; 3]]
[[2; 4]]
[[2; 3]]
[[1; 4]]


:: 12 {"position":"500,7350","size":"100,100"}
<img src="https://github.com/SirKonnor/Stepik/assets/144115654/134b298d-69d3-48eb-b8f1-5079a487a382" width="700px" height="400px"/> 

[[Следующее задание->13]]

[[Назад->11]]


:: 13 {"position":"500,7475","size":"100,100"}
<img src="https://github.com/SirKonnor/Stepik/assets/144115654/471474ba-8360-4a9c-9bb0-098933cd3914" width="700px" height="400px"/>32

[[Следующее задание->Скрин34]]

[[Назад->12]]


:: 1; 3 {"position":"225,7225","size":"100,100"}
Неправильно! Попробуйте снова.

[[Назад->11]]


:: 1; 4 {"position":"500,7225","size":"100,100"}
Правильно! 

[[Следующее задание->12]]


:: 2 {"position":"900,4925","size":"100,100"}
2) Какой запрос верно отобразит всех студентов с оценками равными или больше 85?

[[SELECT * FROM Students WHERE Grade = 85;]]
[[SELECT * FROM Students WHERE Grade > 85;]]
[[SELECT * FROM Students WHERE Grade >= 85;]]
[[SELECT * FROM Students WHERE Grade <> 85;]]

[[Назад->Вопросы]]


:: 2.1 SQL {"position":"900,4525","size":"100,100"}

(align:"=><=")+(box:"X=")[''SQL Where'']

Блок  //WHERE// в SQL используется для фильтрации записей, отвечающих определенным условиям, в операторах выборки, таких как //SELECT, UPDATE// или //DELETE//. Он определяет критерий, согласно которому строка будет включена в результат или исключена из него.

''Синтаксис:''
(text-color:blue)[SELECT] column_name_1, column_name_2, ....
(text-color:blue)[FROM] table_name
(text-color:blue)[WHERE] condition;
Здесь condition может включать различные критерии, такие как сравнения ''(>, <, = и т.д.) ''и логические операторы ''(AND, OR, NOT)'', для создания более сложных условий фильтрации.

''Пример запроса:''
(text-color:blue)[SELECT Name], Grade (text-color:blue)[FROM] Students
(text-color:blue)[WHERE] Grade > 75;
Этот запрос выберет имена и оценки студентов из таблицы Students, но только для тех, у кого оценка больше 75. 

[[Далее->Операторы]]

[[Назад->Практики]]


:: 2.2 SQL {"position":"550,6825","size":"100,100"}


(align:"=><=")+(box:"X=")[''Логический оператор AND в SQL'']

Логический оператор //AND// в SQL используется для комбинирования двух или более условий в одном SQL-запросе. Запрос возвращает результаты только в том случае, если все комбинированные условия истинны.

Синтаксис:

(text-color:blue)[SELECT] column_name_1, column_name_2, ....
(text-color:blue)[FROM] table_name
(text-color:blue)[WHERE] condition_1 (text-color:blue)[AND] condition_2;
 

Пример запроса:

(text-color:blue)[SELECT] Name, Department, Years_of_Experience
(text-color:blue)[FROM] Employees
(text-color:blue)[WHERE] Department = '(text-color:green)[Finance]' (text-color:blue)[AND] Years_of_Experience > 5;
Этот запрос выберет имена, отделы и стаж работы сотрудников из таблицы Employees, но только для тех, кто работает в финансовом отделе (Department = 'Finance') и имеет стаж работы более 5 лет (Years_of_Experience > 5). Оба условия должны быть выполнены для каждой строки, чтобы она попала в результат.

<img src="https://github.com/SirKonnor/Stepik/assets/144115654/3169a62c-f4ed-4106-806f-b03effca2d42" width="700px" height="400px"/> 

[[Вопросы->Опрос]]

[[Назад->Скрин29]]


:: 2; 3 {"position":"75,7175","size":"100,100"}
Неправильно! Попробуйте снова.

[[Назад->11]]


:: 2; 4 {"position":"350,7225","size":"100,100"}
Неправильно! Попробуйте снова.

[[Назад->11]]


:: 3 {"position":"550,5175","size":"100,100"}
[[Следующее задание->Скрин20]]

[[Назад->2]]


:: AS {"position":"900,1900","size":"100,100"}
''Использование псевдонима AS''

''AS'' в SQL используется для //создания псевдонима// (alias) для столбца или таблицы в запросе. Псевдонимы часто применяются для упрощения запросов и улучшения читаемости результатов.

Объяснение:

Использование ''AS'' в запросе SQL похоже на то, как вы могли бы дать кличку своему домашнему питомцу. Вместо использования полного или сложного имени, вы используете короткое и понятное обозначение. Так же и в SQL: вместо длинных названий столбцов или таблиц можно использовать более короткие и удобные имена.

''Применение на практике:''

''Отчеты:'' Использование псевдонимов для столбцов с длинными или неинтуитивными названиями при формировании отчетов.
''Сложные запросы:'' Упрощение написания и понимания запросов, особенно при соединении нескольких таблиц.
 
Синтаксис:

(text-color:blue)[SELECT] column_name (text-color:blue)[AS] alias_name
(text-color:blue)[FROM] table_name;
 
''Пример запроса:''

(text-color:blue)[SELECT] first_name (text-color:blue)[AS name], last_name (text-color:blue)[AS] surname 
(text-color:blue)[FROM] employees;

Объяснение: Этот запрос выбирает столбцы first_name и last_name из таблицы employees, но в результате они будут отображаться как name и surname. Это делает результаты запроса //более понятными//, особенно если исходные названия столбцов не очень информативны или слишком длинны.

[[Далее->Скрин3]]

[[Назад->Звездочка]]



:: FAQ {"position":"550,5825","size":"100,100"}

''Часто задаваемые вопросы (FAQ)''

''Вопрос 1:'' Можно ли использовать //WHERE// для выбора строк на основе текстовых данных?
''Ответ: ''Да, можно использовать WHERE с текстовыми данными, используя операторы сравнения, например =, для точного совпадения или <> для несовпадения.
 
''Вопрос 2: ''Как использовать //WHERE// для фильтрации записей с определенными числовыми значениями?
''Ответ:'' Используйте WHERE с числовыми значениями и математическими операторами, например, WHERE Age > 21 для выборки людей старше 21 года.

''Вопрос 3: ''Может ли //WHERE// фильтровать данные на основе частичного совпадения?
''Ответ:'' Да, но для этого требуются специальные операторы, такие как //LIKE//, которые мы обсудим позже в курсе.

''Вопрос 4:'' Возможно ли использование математических функций в //WHERE//?
''Ответ:'' Да, можно использовать математические функции в WHERE. Например, WHERE (Price * Quantity) > 1000 выберет записи, где общая стоимость превышает 1000.

''Вопрос 5:'' Можно ли комбинировать несколько условий в //WHERE//?
Ответ: В данный момент мы рассмотрели только отдельные условия, но в дальнейшем мы изучим, как комбинировать условия с помощью операторов, таких как AND и OR.

''Вопрос 6:'' Можно ли сравнивать текстовые строки с помощью математических операторов сравнения?
''Ответ: ''Обычно математические операторы сравнения применяются к числовым данным. Для текстовых данных чаще используются операторы, такие как //LIKE //или =.


''Вопрос 7:'' Как обрабатываются //NULL// значения в сравнениях?
''Ответ: ''При сравнении с NULL, результат обычно будет NULL. Например, выражение //Amount = NULL// не вернет никаких строк, поскольку NULL не равносильно "ничему".


''Вопрос 8:'' Можно ли использовать операторы сравнения для дат?
''Ответ:'' Да, можно сравнивать даты с помощью операторов сравнения. Например, //WHERE OrderDate// > '2023-01-01' выберет все заказы, сделанные после 1 января 2023 года.


''Вопрос 9: ''Что означает оператор <>?
Ответ: Оператор <> означает "//не равно//". Он используется для выбора записей, где определенное поле не соответствует указанному значению.


''Вопрос 10:'' Можно ли использовать операторы сравнения в //SELECT// без //WHERE//?
''Ответ:'' Операторы сравнения обычно используются в блоке WHERE для фильтрации данных. Без WHERE они не применяются для фильтрации, но могут использоваться в вычислительных выражениях в SELECT.

[[Ошибки]]

[[Назад->Скрин23]]


:: MySQL {"position":"900,4025","size":"100,100"}

''MySQL и его расширения SQL''

//MySQL// - это популярная открытая система управления реляционными базами данных (СУБД).

''Особенности SQL в MySQL:''

''1. Производительность и масштабируемость:'' MySQL оптимизирован для обеспечения высокой производительности и хорошо масштабируется.

''2. Гибкость в использовании:'' Поддерживает широкий спектр языков программирования и платформ.

''3. Безопасность:'' Предлагает надежные механизмы безопасности, включая поддержку SSL и мощные инструменты управления доступом.

 

''Расширения и уникальные функции SQL в MySQL''
''1. Полнотекстовый поиск: ''MySQL предлагает встроенные функции полнотекстового поиска.

''2. Функции для работы с JSON: ''Поддержка JSON в MySQL позволяет хранить и обрабатывать JSON-данные, используя специализированные функции для их обработки.

''3. Расширенные функции агрегации и аналитики: ''MySQL включает расширенные функции для агрегации данных, такие как// ROLLUP// и //CUBE//, а также аналитические функции.

''4. Оптимизации запросов:'' Система оптимизации запросов MySQL позволяет эффективно выполнять сложные запросы, обеспечивая быстрое извлечение данных.

[[SQLite]]

[[Назад->PL/pgSQL]]


:: OR {"position":"500,7725","size":"100,100"}



:: PL/SQL {"position":"900,3775","size":"100,100"}

''PL/SQL(Procedural Language/SQL) для Oracle Database''

//PL/SQL// (Procedural Language/SQL) - это процедурное расширение для SQL в Oracle Database. 
 
''Применение PL/SQL:''

- Используется для //создания приложений//, которым требуется сложная обработка данных на стороне сервера.
- Обеспечивает эффективное //выполнение транзакций и операций с данными// в Oracle Database.
- Позволяет //создавать модули//, такие как хранимые процедуры, функции, пакеты и триггеры.
 
''Основные особенности PL/SQL''
''1. Блочная структура: ''PL/SQL использует блочную структуру, что позволяет организовывать код в удобные для понимания и управления модули.

''2. Поддержка переменных и констант:'' Позволяет объявлять и использовать переменные и константы для хранения временных данных и управления ими.

''3. Условные конструкции и циклы: ''Поддерживает использование условных операторов //(IF-THEN-ELSE)// и различных видов циклов //(LOOP, WHILE, FOR),// что делает PL/SQL гибким в обработке данных.

''4. Исключения и обработка ошибок: ''Предоставляет механизмы для обработки ошибок и исключений.

''5. Курсоры:'' Поддерживает курсоры для управления данными, полученными из SQL-запросов.

[[PL/pgSQL]]

[[Назад->T-SQL]]


:: PL/pgSQL {"position":"900,3900","size":"100,100"}

''PL/pgSQL для PostgreSQL''

//PL/pgSQL //(Procedural Language/PostgreSQL Structured Query Language) - это процедурное расширение для SQL в PostgreSQL. Оно предназначено для разработки сложных операций и процедур в базе данных PostgreSQL.

//PL/pgSQL// интегрирует элементы процедурного программирования с мощью SQL, предоставляя дополнительные инструменты для обработки данных и написания сложного бизнес-логики на стороне сервера.

''Отличительные черты и возможности PL/pgSQL''
''1. Блочная структура: ''PL/pgSQL использует блочную структуру для организации кода.

''2. Переменные и константы:'' Поддерживает объявление и использование переменных и констант.

''3. Управление транзакциями:'' PL/pgSQL обеспечивает механизмы управления транзакциями.

''4. Исключения и обработка ошибок:'' Предоставляет расширенные возможности для обработки ошибок и исключений.

''5. Интеграция с SQL:'' Тесно интегрирован с SQL, позволяя эффективно использовать все возможности PostgreSQL в PL/pgSQL коде.

[[MySQL]]

[[Назад->PL/SQL]]


:: SELECT * FROM Students WHERE Grade <> 85; {"position":"1125,5075","size":"100,100"}
Неправильно! Попробуйте снова.

[[Назад->2]]


:: SELECT * FROM Students WHERE Grade = 85; {"position":"750,5075","size":"100,100"}
Неправильно! Попробуйте снова.

[[Назад->2]]


:: SELECT * FROM Students WHERE Grade > 85; {"position":"975,5075","size":"100,100"}
Неправильно! Попробуйте снова.

[[Назад->2]]


:: SELECT * FROM Students WHERE Grade >= 85; {"position":"800,5200","size":"100,100"}
Правильно! 

[[Следующий вопрос->3]]


:: SQL Limit {"position":"900,2900","size":"100,100"}

''SQL LIMIT''

Команда //LIMIT// в SQL, используемая в MySQL, ограничивает количество строк, возвращаемых в результате запроса.

//LIMIT// в MySQL подобен запросу на получение ограниченного количества книг из большого списка в библиотеке. Например, если вам нужно изучить только несколько первых записей из большого набора данных, вы можете использовать LIMIT для ограничения вывода.

 

''Применение на практике:''

''Анализ данных:'' Выборка топ-5 продуктов по продажам для определения наиболее популярных товаров.
''Отчетность: ''Получение первых 10 записей из большого набора данных для создания сводных отчетов.
''Ограниченный просмотр: ''Показ только первых нескольких записей в пользовательском интерфейсе, чтобы не перегружать экран большим количеством данных.
 
Синтаксис:
В MySQL синтаксис //LIMIT// следующий:

(text-color:blue)[SELECT] column_name(s)
(text-color:blue)[FROM] table_name
(text-color:blue)[LIMIT number];
//number// здесь указывает на максимальное количество строк, которые должны быть возвращены.

Пример запроса:
(text-color:blue)[SELECT] * (text-color:blue)[FROM]
employees
(text-color:blue)[LIMIT] (text-color:navy)[5];
Этот запрос возвращает первые пять записей из таблицы employees. 
 
Важно отметить, что аналогичная функциональность в других СУБД, например, в SQL Server или MS Access, реализована через команду ''SELECT TOP''.

[[Далее->Скрин9]]

[[Назад->Скрин8]]


:: SQL SD {"position":"900,2400","size":"100,100"}
''SQL Select Distinct''

Команда //SELECT DISTINCT// в SQL используется для выборки уникальных записей из таблицы, исключая дубликаты. 

Представьте, что у вас есть коробка, наполненная разноцветными шариками, где некоторые цвета повторяются. Если вы хотите узнать, какие уникальные цвета шариков есть в коробке, вы бы выбрали по одному шарику каждого цвета. SELECT DISTINCT работает подобным образом: из "коробки" данных (таблицы) он выбирает только уникальные значения, игнорируя повторы.

''Применение на практике:''

''Маркетинговые Анализы:'' Выборка уникальных категорий товаров из таблицы продуктов для определения разнообразия ассортимента.
''Анализ Клиентской Базы:'' Получение списка уникальных городов, из которых есть клиенты, для географического анализа рынка.
''Исследование Данных:'' Определение уникальных типов транзакций в финансовых отчетах.
 
Синтаксис:
Основной синтаксис команды //SELECT DISTINCT://

(text-color:blue)[SELECT DISTINCT] column1, column2, ...
(text-color:blue)[FROM] table_name;
column1, column2 — столбцы, из которых нужно выбрать уникальные значения.
table_name — имя таблицы, из которой производится выборка.
 

Пример запроса:
SELECT DISTINCT country
FROM customers;
Объяснение: Этот запрос выберет все уникальные значения из столбца country в таблице customers. Если в таблице есть несколько клиентов из одной и той же страны, эта страна появится в результате только ''один раз.''

[[Далее->Скрин6]]

[[Назад->Скрин5]]


:: SQLite {"position":"900,4150","size":"100,100"}

''SQLite и его Особенности''

//SQLite// - это компактная, самодостаточная, встраиваемая и высоконадежная СУБД. Она //не требует отдельного сервера или конфигурации//, что делает её идеальной для устройств и приложений, где требуется минималистичная установка.

''Основные Характеристики SQLite:''

''Встраиваемость:'' SQLite легко интегрируется в приложения.
''Легковесность:'' Минимальный размер и низкие требования к ресурсам делают SQLite идеальным для мобильных приложений, встраиваемых систем и малых проектов.
''Безопасность и Надежность:'' SQLite обеспечивает транзакционную целостность данных и поддерживает множество стандартных функций SQL.
 

''Особенности SQL в SQLite''
''1. Транзакционная Модель:'' SQLite поддерживает полноценную транзакционную модель, что гарантирует целостность данных даже при сбоях и ошибках.

''2. Поддержка Стандартов SQL: ''Поддерживает большинство стандартных функций SQL, включая сложные запросы, индексы, триггеры и представления.

''3. Упрощенная Модель Хранения: ''Все данные хранятся в одном файле.

''4. Расширенные Возможности: '' SQLite предлагает многие функции, которые обычно доступны только в более крупных СУБД.

 

''Сценарии использования SQLite''
''1. Мобильные и встраиваемые приложения: ''Широко используется в мобильных приложениях и встраиваемых системах для локального хранения данных.

''2. Прототипирование и разработка: ''Идеально подходит для разработки и тестирования приложений, требующих работы с базами данных.

''3. Локальное хранение в веб-приложениях: ''Используется для локального хранения данных в веб-браузерах и легких веб-приложениях.

''4. Аналитические инструменты и исследования: ''Применяется для анализа данных и в научных исследованиях.

[[Диалекты]]

[[Назад->MySQL]]


:: T-SQL {"position":"900,3650","size":"100,100"}
''T-SQL (Transact-SQL)''

/T-SQL// (Transact-SQL) — это расширение стандартного SQL, используемое в Microsoft SQL Server и Sybase ASE. 

''Особенности и преимущества T-SQL''
''1. Транзакционное управление:'' T-SQL обеспечивает расширенное управление транзакциями.

''2. Процедурное программирование: ''Включает элементы процедурного программирования, такие как переменные, условные операторы и циклы.

''3. Обработка исключений: ''Поддерживает механизмы обработки исключений, которые упрощают отладку и повышают надежность SQL-скриптов.

''4. Улучшенная интеграция:'' T-SQL тесно интегрирован с SQL Server, обеспечивая оптимизацию производительности и доступ к уникальным функциям сервера.

''Примеры расширенных функций и операторов T-SQL''
''1. Оконные функции: ''T-SQL поддерживает оконные функции, такие как //ROW_NUMBER(), RANK(), DENSE_RANK(),//// которые позволяют выполнять сложные аналитические операции над наборами данных.

''2. Объединение таблиц: ''Предоставляет расширенные возможности для соединения таблиц, включая операторы //JOIN// и //APPLY.//

''3. Объявление переменных и табличных выражений:'' В T-SQL можно объявлять переменные и использовать их в запросах, а также создавать табличные выражения (CTE - Common Table Expressions).

''4. Хранимые процедуры и функции:'' Позволяет создавать и использовать хранимые процедуры и функции.

''5. Использование TRY...CATCH:'' Конструкции TRY...CATCH для обработки ошибок и исключений в SQL-скриптах.

[[PL/SQL]]

[[Назад->1.4 SQL]]


:: Базы Данных {"position":"900,625","size":"100,100"}
(text-style:"double-underline")[Общее определение типов Баз Данных]

//База данных// - это организованная коллекция данных, которая хранится, управляется и обрабатывается эффективным образом. Они применяются в различных приложениях, начиная от простых веб-сайтов и заканчивая сложными информационными системами.

(text-style:"underline")[Типы баз данных:]

1. ''Реляционные базы данных (RDBMS):'' используют связи между таблицами для хранения данных.
2. ''Нереляционные (NoSQL) базы данных:''
   - Документо-ориентированные;
   - Ключ-значение;
   - Столбцово-ориентированные;
   - Графовые.
3. Объектно-ориентированные базы данных
4. Иерархические базы данных
5. Сетевые базы данных

''Зачем нужны разные типы баз данных:''

1. ''Соответствие специфике приложений:'' Разные приложения имеют разные требования к хранению и обработке данных. Например, веб-приложения могут требовать гибкости NoSQL, а финансовые системы - структуры и надежности RDBMS.
2. ''Оптимизация производительности:'' Некоторые типы баз данных лучше подходят для работы с большими объемами данных или операций, требующих высокой скорости чтения и записи.
3. ''Удовлетворение технических требований:'' В зависимости от поставленной задачи может потребоваться определенный тип базы данных, например, графовая база для анализа социальных сетей.

[[Реляционные БД]]

[[Назад->Далее]]


:: Вопросы {"position":"900,4775","size":"100,100"}
1) Что делает блок WHERE в SQL?

[[Фильтрует записи, соответствующие определенным условиям.]]
[[Обновляет данные в таблице.]]
[[Создает новую таблицу.]]
[[Удаляет данные из таблицы.]]

[[Назад->Операторы]]


:: Далее {"position":"900,500","size":"100,100"}
''Синтаксис''

(text-colour:blue)[SELECT] Имя, Отчество 
(text-colour:blue)[FROM] Buyers
(text-colour:blue)[WHERE] Фамилия = (text-colour:cyan)['Миронов'];
 

Этот запрос извлекает имя и фамилию покупателя из таблицы buyer, у которого фамилия "Миронов".

<img src="https://github.com/SirKonnor/Stepik/assets/144115654/7db02354-079c-44f4-ac45-ba7ae0cebd81" width="700px" height="400"\>

[[Базы Данных]]

[[Назад->1.1 SQL]]


:: Диалекты {"position":"900,4275","size":"100,100"}

''Сравнение SQL-диалектов''

''Сравнение возможностей и ограничений различных SQL-диалектов''
''1. T-SQL (Microsoft SQL Server) vs PL/SQL (Oracle)''

''Синтаксис:'' Оба диалекта расширяют стандартный SQL, но T-SQL более тесно интегрирован с SQL Server, в то время как PL/SQL имеет более процедурный характер.
''Производительность:''// T-SQL //оптимизирован для работы с транзакционными данными, //PL/SQL// - для сложных операций обработки данных.
''Функциональность:'' PL/SQL предлагает более широкие возможности для процедурного программирования.

''2. PL/pgSQL (PostgreSQL) vs MySQL SQL''

''Расширенные Функции:'' PL/pgSQL поддерживает сложные процедуры и функции, в то время как MySQL предлагает более легковесные и гибкие решения для работы с данными.
''Подход к Транзакциям:'' PostgreSQL и его PL/pgSQL обеспечивают мощную поддержку транзакций, тогда как MySQL ориентирован на быстродействие и простоту использования.

''3. SQLite''

''Легковесность:'' SQLite идеально подходит для малых проектов и встраиваемых систем, но имеет ограничения в масштабировании и параллельной обработке данных.
 

''Рекомендации по выбору SQL-диалекта''
''1. Требования к производительности и масштабируемости: ''Для высокопроизводительных и масштабируемых решений рекомендуется использовать T-SQL или PL/SQL в зависимости от выбранной СУБД (SQL Server или Oracle).

''2. Сложность обработки данных:'' Если требуются сложные процедурные операции и обработка данных, PL/SQL будет предпочтительным выбором.

''3. Простота разработки и тестирования: ''Для проектов, где требуется простота и гибкость, подойдет MySQL или SQLite. MySQL идеально подходит для веб разработки, тогда как SQLite - для малых проектов или встраиваемых приложений.

''4. Бюджет и ресурсы:'' Стоимость лицензирования и поддержки также должна учитываться при выборе. MySQL и PostgreSQL предлагают бесплатные и открытые решения, в отличие от коммерческих Oracle и SQL Server.

[[Практики]]

[[Назад->SQLite]]



:: Звездочка {"position":"900,1775","size":"100,100"}
''Использование звездочки *''

В SQL ''*'' (звездочка) в команде //SELECT// используется для выбора всех столбцов из указанной таблицы.

Использование ''*'' в запросе //SELECT// подобно запросу к библиотекарю дать вам список всех глав (столбцов) каждой книги (строки) в разделе (таблице). Это удобный способ получить полное содержимое таблицы без необходимости перечислять все названия столбцов.

''Применение на практике:''

''Быстрый обзор данных:'' При исследовании новой таблицы данных можно использовать //SELECT// * для получения общего представления о всех столбцах и данных.
Администрирование баз данных: Для проверки структуры и содержимого таблиц после выполнения операций вставки, обновления или удаления.
 

Синтаксис

(text-color:blue)[SELECT] * (text-color:blue)[FROM] table_name;
 

[[Далее->AS]]

[[Назад->Скрин2]]


:: И. БД {"position":"900,1125","size":"100,100"}
(text-style:"double-underline")[Иерархические Базы Данных]

//Иерархические базы данных// представляют данные в виде дерева, где каждая запись имеет один родительский элемент и может иметь множество дочерних элементов. Отношения в таких базах данных обычно представляются как "родитель-потомок".

 

''Примеры СУБД:''

''IBM IMS (Information Management System):'' Одна из первых систем баз данных, разработанная IBM.
 

''Использование:''

''Организационные структуры:'' Иерархические базы данных подходят для управления данными, которые имеют естественную иерархическую структуру.
''Системы управления контентом: ''Используются в CMS для организации контента в иерархическом виде.
''Транзакционные системы:'' Подходят для сложных транзакционных систем, где иерархия и скорость доступа к данным являются важными факторами.
 

''Преимущества:''

''Четкая иерархия:'' Иерархическая структура упрощает понимание и навигацию по данным.
''Быстрый доступ к данным:'' Доступ к данным часто быстрее, чем в реляционных базах данных.
''Эффективность для определенных типов запросов: ''Запросы, которые естественно соответствуют иерархии, могут быть выполнены очень эффективно.

[[Сетевые БД]]

[[Назад->О-о БД]]


:: Имена всех сотрудников отдела HR {"position":"650,7100","size":"100,100"}
Неправильно! Попробуйте снова.

[[Назад->Опрос]]


:: Имена сотрудников отдела HR с любым стажем работы {"position":"475,7100","size":"100,100"}
Неправильно! Попробуйте снова.

[[Назад->Опрос]]


:: Имена сотрудников отдела HR с опытом работы более 10 лет {"position":"350,6975","size":"100,100"}
Правильно! 

[[Следующий вопрос->11]]


:: Имена сотрудников, которым 10 лет {"position":"750,6975","size":"100,100"}
Неправильно! Попробуйте снова.

[[Назад->Опрос]]


:: Нереляционные БД {"position":"900,875","size":"100,100"}
(text-style:"double-underline")[Нереляционные (NoSQL) Базы Данных]

//NoSQL (Not Only SQL)// охватывает широкий спектр баз данных, предназначенных для решения специфических задач. Эти базы данных часто оптимизированы для работы с большими объемами данных, распределенными системами и горизонтальным масштабированием.

''Типы NoSQL Баз Данных:''

- //Документо-ориентированные Базы Данных//

''Описание:'' Хранят данные в виде документов, чаще всего в форматах JSON или XML. 
''Примеры: ''MongoDB, CouchDB.
''Использование: ''Идеально подходят для веб-приложений, CMS, платформ электронной коммерции.

- //Базы Данных ключ-значение//

''Описание:'' Простейшая форма NoSQL баз данных, где каждое значение ассоциировано с уникальным ключом.
''Примеры: ''Redis, DynamoDB.
''Использование: ''Подходят для кэширования, сеансов пользователей, чатов, рекомендательных систем.

- //Столбцово-ориентированные Базы Данных//

''Описание: ''Оптимизированы для чтения и записи больших объемов данных, храня данные не по строкам, а по столбцам. 
''Примеры: ''Cassandra, HBase.
''Использование: ''Идеально подходят для аналитических приложений, Big Data, временных рядов.

- //Графовые Базы Данных//

''Описание: ''Специализированные на хранении и обработке данных, представленных в виде графов (узлы - это объекты, а ребра - отношения между ними). 
''Примеры:'' Neo4j, Amazon Neptune.
''Использование: ''Очень эффективны для социальных сетей, рекомендательных систем, сетевого анализа.
 

- //Преимущества NoSQL://

''Гибкость структур:'' NoSQL базы данных обеспечивают гибкость в работе со структурами данных.
''Масштабируемость: ''Отлично подходят для горизонтального масштабирования и работы с большими объемами данных.
''Высокая производительность:'' Некоторые типы NoSQL баз данных оптимизированы для быстрых операций чтения и записи.
 
 [[О-о БД]]
 
 [[Назад->Реляционные БД]]


:: О-о БД {"position":"900,1000","size":"100,100"}
(text-style:"double-underline")[Объектно-ориентированные Базы Данных]

//Объектно-ориентированные базы данных (OODBMS)// представляют данные в виде объектов, аналогично тому, как это делается в объектно-ориентированных языках программирования. В таких базах данных данные и их отношения представлены в форме объектов, которые могут включать в себя как данные (''атрибуты''), так и методы (''функции''). 

 

''Примеры СУБД:''

''db4o:'' Объектно-ориентированная база данных, предназначенная для платформы Java и .NET.
''ObjectDB:'' База данных, которая поддерживает язык запросов JPA/JDO и предназначена для Java-приложений.
 

''Использование:''

''Тесная интеграция с ООП:'' Особенно полезны в системах, где требуется тесная интеграция базы данных с объектно-ориентированным программированием.
''Комплексные приложения: ''Хорошо подходят для приложений с сложной бизнес-логикой и структурой данных, где объекты и их взаимодействия являются ключевыми элементами.
''Объектно-ориентированный дизайн:'' Удобны для использования в среде, где уже применяются принципы объектно-ориентированного дизайна.
 

''Преимущества:''

''Согласованность с ООП: '' Cтруктура данных в базе напрямую соответствует структуре объектов в приложении.
''Избегание импедансного расхождения: ''Снижается проблема импедансного расхождения, которая возникает, когда данные в приложениях представлены в виде объектов, в то время как в базе данных они хранятся в табличной форме.
''Упрощение разработки: ''Уменьшается необходимость в преобразовании данных между базой данных и приложением, упрощая процесс разработки.

[[И. БД]]

[[Назад->Нереляционные БД]]


:: Обновляет данные в таблице. {"position":"1125,4925","size":"100,100"}
Неправильно! Попробуйте снова.

[[Назад->Вопросы]]


:: Операторы {"position":"900,4650","size":"100,100"}

''Математические операторы сравнения''

Математические операторы сравнения в SQL используются для сравнения двух значений или выражений. К основным операторам относятся ''=, >, <, >=, <=, <> (или !=)''.

Операторы сравнения позволяют осуществлять выборку, фильтрацию, обновление и удаление данных на основе заданных условий. Они являются фундаментальной частью SQL-запросов, позволяя проводить анализ и обработку данных в базе.

''Практический пример:''
Рассмотрим таблицу //Orders// с полями //OrderID//, //CustomerID//, //Amount//. Чтобы выбрать заказы на сумму более 1000, используем запрос:

(text-color:blue)[SELECT] * (text-color:blue)[FROM] Orders 
(text-color:blue)[WHERE ]Amount > 1(text-color:navy)[1000];
 
Синтаксис:
''='' - Равно
''> ''- Больше чем
''<'' - Меньше чем
''>='' - Больше или равно
''<= ''- Меньше или равно
''<>'' или ''!= ''- Не равно
 

''Пример запроса:''
Выборка заказов с суммой меньше 500 и не равной 0:

(text-color:blue)[SELECT ]* (text-color:blue)[FROM] Orders 
(text-color:blue)[WHERE] Amount < (text-color:navy)[500] (text-color:blue)[AND] Amount <> (text-color:navy)[0];

[[Вопросы]]

[[Назад->2.1 SQL]]


:: Опрос {"position":"550,6950","size":"100,100"}
1) Какой результат вернет следующий SQL-запрос?

(text-color:blue)[SELECT Name FROM] Employees (text-color:blue)[WHERE] Department = '(text-color:green)[HR]' (text-color:blue)[AND] Years_of_Experience > (text-color:green)[10];

[[Имена сотрудников отдела HR с любым стажем работы]]
[[Имена всех сотрудников отдела HR]]
[[Имена сотрудников отдела HR с опытом работы более 10 лет]]
[[Имена сотрудников, которым 10 лет]]

[[Назад->2.2 SQL]]


:: Ошибки {"position":"550,5950","size":"100,100"}

''Распространенные ошибки''

''Ошибка 1: Неверное Использование Условия в WHERE''
''Описание ошибки:'' Использование несуществующего столбца или опечатка в названии столбца в условии //WHERE.//
(text-color:red)[''Пример неправильного использования: '']//SELECT * FROM Students WHERE Grde > 75;//
(text-color:blue)[''Пояснение: '']Grde не существует в таблице. Ошибка в названии столбца приводит к ошибке в запросе.
(text-color:green)[''Правильный подход:''] SELECT * FROM Students WHERE Grade > 75;
 

''Ошибка 2: Использование неподходящего оператора сравнения''
''Описание ошибки: ''Использование оператора > вместо < или наоборот.
(text-color:red)[''Пример неправильного использования: '']SELECT * FROM Orders WHERE Amount > 1000; (когда нужно выбрать заказы на сумму менее 1000).
(text-color:blue)[''Пояснение:''] Использование > вместо < приводит к выборке неверных данных.
(text-color:green)[''Правильный подход: '']SELECT * FROM Orders WHERE Amount < 1000;
 

''Ошибка 3: Неправильное сравнение с NULL''
''Описание ошибки: ''Использование = или <> для сравнения со значением NULL.
(text-color:red)[''Пример неправильного использования: '']SELECT * FROM Students WHERE Grade = NULL;
(text-color:blue)[''Пояснение: '']NULL не является обычным значением и не может быть сравнено с = или <>. Такой запрос не вернет ожидаемых результатов.
(text-color:green)[''Правильный подход:''] SELECT * FROM Students WHERE Grade IS NULL;
 

''Ошибка 4: Неверное понимание приоритета операторов''
''Описание ошибки: ''Неправильное расположение скобок в условиях, влияющее на приоритет операторов.
(text-color:red)[''Пример неправильного использования: '']SELECT * FROM Orders WHERE Amount > 500 AND Amount < 1000 OR CustomerID = 1; (может интерпретироваться неверно).
(text-color:blue)[''Пояснение: '']Операторы AND и OR имеют разный приоритет, и их смешение без скобок может привести к неправильной интерпретации условий. AND имеет приоритетность выше, чем OR, приводя аналогию AND является умножением, а OR сложение.
(text-color:green)[''Правильный подход:''] SELECT * FROM Orders WHERE (Amount > 500 AND Amount < 1000) OR CustomerID = 1;
 

''Ошибка 5: Использование некорректных значений в сравнении''
''Описание ошибки: ''Сравнение столбца с данными неправильного типа.
(text-color:red)[''Пример неправильного использования: '']SELECT * FROM Students WHERE Name > 75;
(text-color:blue)[''Пояснение: '']Сравнение текстового поля Name с числом 75 не имеет смысла.
(text-color:green)[''Правильный подход: '']Использовать корректные и логически обоснованные условия сравнения для соответствующих типов данных.

[[Задание 1->Скрин24]]

[[Назад->FAQ]]


:: Практики {"position":"900,4400","size":"100,100"}

''Лучшие практики и переносимость Кода в SQL''

''Значение переносимости кода''

//Переносимость кода// в контексте SQL означает ''способность кода работать в различных СУБД с минимальными изменениями. ''

''Советы по написанию переносимого SQL-кода''
-''Использование Стандартного SQL:'' Придерживайтесь стандартов SQL, таких как ANSI SQL, для обеспечения совместимости с большинством СУБД.

-''Избегайте Производительных Расширений:'' Остерегайтесь использования расширений SQL, специфичных для определенных СУБД, таких как специальные функции или синтаксис.

-''Параметризация Запросов:'' Используйте параметризацию для увеличения гибкости запросов и повышения безопасности.

-''Проверка Версий СУБД:'' Учитывайте различия в версиях СУБД, которые могут влиять на поддержку определенных функций.

 

''Лучшие практики программирования для работы с разными SQL-диалектами''
-''Документирование специфичных для диалекта особенностей:'' Ясно документируйте использование специфических для диалекта функций и синтаксиса в коде.
-''Модульность и абстракция: ''Стремитесь к модульности в проектировании, создавая абстракции, которые могут скрыть специфические для СУБД детали.
-''Тестирование на разных платформах: ''Регулярно тестируйте код на всех целевых СУБД для обнаружения и исправления проблем совместимости.
-''Использование слоя доступа к данным: ''Рассмотрите использование слоя доступа к данным// (DAL) //или //ORM //(Object-Relational Mapping), которые могут обеспечить универсальный интерфейс для работы с разными СУБД.

[[2.1 SQL]]

[[1.4 SQL]]

[[1.3 SQL]]

[[1.2 SQL]]

[[1.1 SQL]]

[[Назад->Диалекты]]


:: Реляционные БД {"position":"900,750","size":"100,100"}
(text-style:"double-underline")[Реляционные Базы Данных (RDBMS)]

В реляционных базах данных данные организованы в виде отдельных таблиц, состоящих из строк (записей) и столбцов (атрибутов). Отношения между таблицами устанавливаются через ключи.

''Примеры СУБД:''

1. ''MySQL:'' Популярная открытая СУБД, широко используемая в сфере веб-разработки.
2. ''PostgreSQL:'' Мощная открытая СУБД, которая поддерживает как традиционные, так и новаторские функции.
3. ''Oracle:'' Коммерческая СУБД, известная своей надежностью и масштабируемостью.
4. ''Microsoft SQL Server:'' Коммерческая СУБД от Microsoft, широко применяемая в корпоративных решениях.

''Использование:''
1. ''Универсальность:'' RDBMS подходят для большинства видов приложений благодаря своей гибкости, мощности и надежности. 
2. ''Сложные запросы и анализ данных:'' Поддержка сложных SQL-запросов, включая соединения (joins), подзапросы и агрегатные функции.
3. ''Транзакционность и надежность: ''RDBMS обеспечивают согласованность данных и поддержку транзакций.
4. ''Строгая схема данных:'' Наличие определенной структуры данных обеспечивает четкую организацию и целостность данных.

''Преимущества:''

1. ''Стандартизация и совместимость:'' Язык SQL как стандарт запросов обеспечивает совместимость и переносимость знаний между различными системами.
2. ''Интеграция с различными инструментами и технологиями:'' Широкое распространение реляционных баз данных позволяет легко интегрировать их с разнообразными инструментами и технологиями.

[[Нереляционные БД]]

[[Назад->Базы Данных]]


:: Сетевые БД {"position":"900,1250","size":"100,100"}
(text-style:"double-underline")[Сетевые Базы Данных]


//Сетевые базы данных// являются расширением иерархической модели баз данных. В этом типе баз данных каждый узел (запись) может иметь несколько родителей, что позволяет создавать сложные сетевые структуры данных. 

''Примеры СУБД:''

''IDMS (Integrated Database Management System):'' Один из первых коммерческих сетевых систем управления базами данных.

''Использование:''

''Сложные приложения:'' Сетевые базы данных хорошо подходят для приложений, где требуются многоуровневые и многомерные отношения.
''Крупные корпоративные системы: ''Их использование оправдано в крупных корпоративных системах, где необходимо управление сложными сетями данных и отношений.
''Системы, требующие высокой гибкости в определении отношений: ''Подходят для систем, где отношения между данными не могут быть легко представлены в иерархической или реляционной моделях.
 

''Преимущества:''

''Гибкость в определении отношений:'' Позволяет более естественно представлять сложные отношения между данными.
''Эффективный доступ к связанным данным:'' Поскольку отношения между данными являются частью структуры базы данных, доступ к связанным данным может быть более эффективным.
''Управление сложными структурами: ''Лучше подходит для приложений, где структура данных не является строго иерархической и требует большей гибкости в определении связей.

[[1.2 SQL]]

[[Назад->И. БД]]


:: Синтаксис {"position":"900,3400","size":"100,100"}
''Основы синтаксиса SQL''

//Синтаксис SQL// — это набор правил, которые определяют структуру и формат команд в SQL, используемых для выполнения различных операций с базами данных, таких как создание таблиц, выборка данных, обновление записей и многие другие.

Синтаксис SQL можно сравнить с грамматикой языка. Так же, как в обычном языке есть правила, определяющие, как строить предложения, в SQL есть правила, которые определяют, как формировать команды. Эти команды позволяют "общаться" с базой данных: запрашивать данные, изменять их, удалять и т.д.

Синтаксис
Основные элементы синтаксиса SQL включают ключевые слова, операторы, выражения и предложения. Ключевые слова, такие как //SELECT//, //INSERT//, //UPDATE//, и //DELETE//, определяют тип операции. Операторы, например, ''=, >, <, ''используются для сравнения значений. Выражения и предложения строятся из этих элементов для формирования полных команд SQL.

Пример запроса:
(text-colour:blue)[SELECT Name 
FROM] Employees 
(text-colour:blue)[WHERE] Age > (text-colour:navy)[30];

<img src="https://github.com/SirKonnor/Stepik/assets/144115654/c7483939-b55a-445b-8b44-c8a9d1646546" width="700px" height="400"\>


[[1.4 SQL]]

[[1.3 SQL]]

[[1.2 SQL]]

[[1.1 SQL]]

[[Назад->1.3 SQL]]


:: Скрин {"position":"900,1525","size":"100,100"}

''Простая выборка данных''

<img src="https://github.com/SirKonnor/Stepik/assets/144115654/62a027a7-5b63-4311-acb5-65a794e37c9e" width="700px" height="400"\>

[[Далее->Скрин2]]

[[Назад->1.2 SQL]]


:: Скрин10 {"position":"900,3150","size":"100,100"}

<img src="https://github.com/SirKonnor/Stepik/assets/144115654/398dc62b-a9cc-430c-8dc6-fad5a5002e41" width="700px" height="400"\>

[[1.3 SQL]]

[[1.2 SQL]]

[[1.1 SQL]]

[[Назад->Скрин9]]


:: Скрин2 {"position":"900,1650","size":"100,100"}

''Выборка специфических столбцов''

<img src="https://github.com/SirKonnor/Stepik/assets/144115654/cef99407-0a46-490f-a4ec-7a07a26f88d4" width="700px" height="400"\>

[[Звездочка]]

[[Назад->Скрин]]


:: Скрин20 {"position":"550,5325","size":"100,100"}
<img src="https://github.com/SirKonnor/Stepik/assets/144115654/ca9b4c50-3c52-4665-93fd-4bda81109364" width="700px" height="400px"/>

[[Следующее задание->Скрин21]]

[[Назад->3]]


:: Скрин21 {"position":"550,5450","size":"100,100"}
<img src="https://github.com/SirKonnor/Stepik/assets/144115654/cd416045-f43e-426b-b82d-1687a86039e7" width="700px" height="400px"/>

[[Следующее задание->Скрин22]]

[[Назад->Скрин20]]


:: Скрин22 {"position":"550,5575","size":"100,100"}
<img src="https://github.com/SirKonnor/Stepik/assets/144115654/a2020cc6-be02-46dc-8b10-7b57fd1f75f1" width="700px" height="400px"/>

[[Следующее задание->Скрин23]]

[[Назад->Скрин21]]


:: Скрин23 {"position":"550,5700","size":"100,100"}
<img src="https://github.com/SirKonnor/Stepik/assets/144115654/6fb54e61-a7ba-42cc-8f86-654fd653fb4a" width="700px" height="400px"/>

[[FAQ]]

[[Назад->Скрин22]]


:: Скрин24 {"position":"550,6075","size":"100,100"}
<img src="https://github.com/SirKonnor/Stepik/assets/144115654/e144fbbd-3736-4d1a-b70e-ab70389c8e13" width="700px" height="400px"/>


[[Задание 2->Скрин25]]

[[Назад->Ошибки]]


:: Скрин25 {"position":"550,6200","size":"100,100"}
<img src="https://github.com/SirKonnor/Stepik/assets/144115654/4674f85a-fcb3-4eed-8a4d-56f2e15d2fa6" width="700px" height="400px"/>

[[Задание 3->Скрин26]]

[[Назад->Скрин24]]


:: Скрин26 {"position":"550,6325","size":"100,100"}
<img src="https://github.com/SirKonnor/Stepik/assets/144115654/d067b860-0876-4907-ac90-bd3693590f6a" width="700px" height="400px"/>

[[Задание 4->Скрин27]]

[[Назад->Скрин25]]


:: Скрин27 {"position":"550,6450","size":"100,100"}
<img src="https://github.com/SirKonnor/Stepik/assets/144115654/6cdf1feb-8128-4844-8067-ef049d60b509" width="700px" height="400px"/>

[[Задание 5->Скрин28]]

[[Назад->Скрин26]]


:: Скрин28 {"position":"550,6575","size":"100,100"}
<img src="https://github.com/SirKonnor/Stepik/assets/144115654/018c6f04-2805-4d0b-a250-76739aaa462e" width="700px" height="400px"/>

[[Задание 6->Скрин29]]

[[Назад->Скрин27]]


:: Скрин29 {"position":"550,6700","size":"100,100"}
<img src="https://github.com/SirKonnor/Stepik/assets/144115654/c2bff926-542f-4f12-b42b-56f188845b05" width="700px" height="400px"/>

[[2.2 SQL]]

[[2.1 SQL]]

[[1.4 SQL]]

[[1.3 SQL]]

[[1.2 SQL]]

[[1.1 SQL]]

[[Назад->Скрин28]]


:: Скрин3 {"position":"900,2025","size":"100,100"}

''Использование звездочки *''

<img src="https://github.com/SirKonnor/Stepik/assets/144115654/372a191f-758c-466c-ba55-3adafc646d26" width="700px" height="400"\>

[[Далее->Скрин4]]

[[Назад->AS]]


:: Скрин34 {"position":"500,7600","size":"100,100"}
<img src="https://github.com/SirKonnor/Stepik/assets/144115654/c9360694-0390-4bd7-ac4c-1fb046d3f83a" width="700px" height="400px"/>

[[OR]]

[[Назад->13]]


:: Скрин4 {"position":"900,2150","size":"100,100"}

''Создание псевдонимов для столбцов''

<img src="https://github.com/SirKonnor/Stepik/assets/144115654/a0b78613-9c55-438c-a7d8-c1625a961413" width="700px" height="400"\>

[[Далее->Скрин5]]
[[Назад->Скрин3]]


:: Скрин5 {"position":"900,2275","size":"100,100"}

''Комбинация звездочки и псевдонимов''

<img src="https://github.com/SirKonnor/Stepik/assets/144115654/5a6cd883-3658-4421-a0e2-c8215e137bd0" width="700px" height="400"\>


[[SQL SD]]

[[Назад->Скрин4]]


:: Скрин6 {"position":"900,2525","size":"100,100"}

''Выборка уникальных стран''

<img src="https://github.com/SirKonnor/Stepik/assets/144115654/8805ca0c-591f-49e8-b489-d7d18af23c13" width="700px" height="400"\>

[[Далее->Скрин7]]

[[Назад->SQL SD]]


:: Скрин7 {"position":"900,2650","size":"100,100"}

''Анализ уникальных транзакций''

<img src="https://github.com/SirKonnor/Stepik/assets/144115654/6dbc3535-5855-4f8c-a315-86183b53d127" width="700px" height="400"\>

[[Далее->Скрин8]]

[[Назад->Скрин6]]


:: Скрин8 {"position":"900,2775","size":"100,100"}

''Уникальные комбинации страны и города''

<img src="https://github.com/SirKonnor/Stepik/assets/144115654/71707acc-fc9b-4300-8d95-ef9bdc33dc87" width="700px" height="400"\>

[[SQL Limit]]

[[Назад->Скрин7]]


:: Скрин9 {"position":"900,3025","size":"100,100"}

<img src="https://github.com/SirKonnor/Stepik/assets/144115654/98ff6098-e50f-413e-8f3a-a0088ad93ef0" width="700px" height="400"\>

[[Далее->Скрин10]]

[[Назад->SQL Limit]]


:: Создает новую таблицу. {"position":"750,4800","size":"100,100"}
Неправильно! Попробуйте снова.

[[Назад->Вопросы]]


:: Удаляет данные из таблицы. {"position":"1100,4800","size":"100,100"}
Неправильно! Попробуйте снова.

[[Назад->Вопросы]]


:: Фильтрует записи, соответствующие определенным условиям. {"position":"675,4950","size":"100,100"}
Правильно! 

[[Следующий вопрос->2]]
